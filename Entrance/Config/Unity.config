<?xml version="1.0"?>
<unity>
  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />
  <container name ="TrackerDevice">
    <extension type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception"></extension>
    <register name="TrackerDevice.Application.Exception"
              type ="DotNetSharp.ITrackerDevice, DotNetSharp.Core"
              mapTo ="DotNetSharp.Data.TrackerDeviceApplicationException, DotNetSharp.Data">
      <constructor></constructor>
    </register>
  </container>
  <container name ="SystemType">
    <extension type="Microsoft.Practices.Unity.InterceptionExtension.Interception, Microsoft.Practices.Unity.Interception"></extension>
    <register name="DataSource"
              type ="DotNetSharp.Data.IDataSource, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.DbContext, DotNetSharp.Data">
      <constructor>
        <param name ="cntStringName"
               value="DotNetSharp.Survery.SQLServer"></param>
      </constructor>
    </register>
    <register name="dbSourceSecurity"
              type ="DotNetSharp.Data.IDataSource, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.DbContext, DotNetSharp.Data">
      <constructor>
        <param name ="cntStringName"
               value="DotNetSharp.Security.SQLServer"></param>
      </constructor>
    </register>
    <register name="repDynamic"
              type ="DotNetSharp.Data.Dynamic.IRepositoryDynamic, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.RepositoryDynamic, DotNetSharp.Data">
      <constructor>
        <param name ="ds">
          <dependency name="DataSource"></dependency>
        </param>
      </constructor>
    </register>
    <register type ="DotNetSharp.Data.Dynamic.IRepositoryDynamic, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.RepositoryDynamic, DotNetSharp.Data">
      <constructor>
        <param name ="ds">
          <dependency name="DataSource"></dependency>
        </param>
      </constructor>
    </register>
    <register name="repDynamicDefinition"
              type ="DotNetSharp.Data.Dynamic.IRepositoryDynamicDefinition, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.RepositoryDynamicDefinition, DotNetSharp.Data">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.CacheInterception, DotNetSharp.Unity"></interceptionBehavior>
      <constructor>
        <param name ="ds">
          <dependency name="DataSource"></dependency>
        </param>
      </constructor>
    </register>
    <register type ="DotNetSharp.Data.Dynamic.IRepositoryDynamicDefinition, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.RepositoryDynamicDefinition, DotNetSharp.Data">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.CacheInterception, DotNetSharp.Unity"></interceptionBehavior>
      <constructor>
        <param name ="ds">
          <dependency name="DataSource"></dependency>
        </param>
      </constructor>
    </register>
    <register type ="DotNetSharp.Data.Dynamic.IDynamicQuery, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.DynamicQuery, DotNetSharp.Data">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.TrackerInterception, DotNetSharp.Unity"></interceptionBehavior>
      <constructor>
        <param name ="rep">
          <dependency name ="repDynamic"></dependency>
        </param>
        <param name ="repd">
          <dependency name ="repDynamicDefinition"></dependency>
        </param>
      </constructor>
    </register>
    <register name ="wstDynamic"
              type ="DotNetSharp.Data.Dynamic.IDynamicQuery, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.DynamicQuery, DotNetSharp.Data">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.TrackerInterception, DotNetSharp.Unity"></interceptionBehavior>
      <constructor>
        <param name ="rep">
          <dependency name ="repDynamic"></dependency>
        </param>
        <param name ="repd">
          <dependency name ="repDynamicDefinition"></dependency>
        </param>
      </constructor>
    </register>
    <register type ="DotNetSharp.Data.Dynamic.IDynamicSurvey, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.DynamicSurvey, DotNetSharp.Data">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.TrackerInterception, DotNetSharp.Unity"></interceptionBehavior>
      <constructor>
        <param name ="rep">
          <dependency name ="repDynamic"></dependency>
        </param>
        <param name ="repd">
          <dependency name ="repDynamicDefinition"></dependency>
        </param>
      </constructor>
    </register>
    <register name ="wstSurvey"
              type ="DotNetSharp.Data.Dynamic.IDynamicSurvey, DotNetSharp.Data"
              mapTo ="DotNetSharp.Data.Dynamic.DynamicSurvey, DotNetSharp.Data">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.TrackerInterception, DotNetSharp.Unity"></interceptionBehavior>
      <constructor>
        <param name ="rep">
          <dependency name ="repDynamic"></dependency>
        </param>
        <param name ="repd">
          <dependency name ="repDynamicDefinition"></dependency>
        </param>
      </constructor>
    </register>
    <register type ="DotNetSharp.Security.ISecurityQuery, DotNetSharp.Services"
              mapTo ="DotNetSharp.Security.WCF.SecurityClientQuery, DotNetSharp.Services">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.TrackerInterception, DotNetSharp.Unity"></interceptionBehavior>
    </register>
    <register type ="DotNetSharp.Security.ISecurityEdit, DotNetSharp.Services"
              mapTo ="DotNetSharp.Security.WCF.SecurityClientEdit, DotNetSharp.Services">
      <interceptor type="Microsoft.Practices.Unity.InterceptionExtension.InterfaceInterceptor, Microsoft.Practices.Unity.Interception"></interceptor>
      <interceptionBehavior type="DotNetSharp.Unity.Interception.TrackerInterception, DotNetSharp.Unity"></interceptionBehavior>
    </register>

    <!--公共-->
    <register type ="Captain.Library.Repository.ICommonRepository, Captain.Library.Repository"
                     mapTo ="Captain.Library.Repository.CommonRepository, Captain.Library.Repository">
    </register>
    <register type ="Captain.Library.Workstation.ICommonWorkStation, Captain.Library.Workstation"
              mapTo ="Captain.Library.Workstation.CommonWorkStation, Captain.Library.Workstation">
    </register>

    <!--地域-->
    <register type ="Captain.Library.Repository.IZoneRepository, Captain.Library.Repository"
                     mapTo ="Captain.Library.Repository.ZoneRepository, Captain.Library.Repository">
    </register>
    <register type ="Captain.Library.Workstation.IZoneWorkStation, Captain.Library.Workstation"
              mapTo ="Captain.Library.Workstation.ZoneWorkStation, Captain.Library.Workstation">
    </register>

    <!--数据字典-->
    <register type="Captain.Library.Repository.IDictionaryRepository, Captain.Library.Repository"
              mapTo="Captain.Library.Repository.DictionaryRepository, Captain.Library.Repository">
    </register>
    <register type="Captain.Library.Workstation.IDictionaryWorkStation, Captain.Library.Workstation"
              mapTo="Captain.Library.Workstation.DictionaryWorkStation, Captain.Library.Workstation">
    </register>

    <!--发包方-->
    <register type="Captain.Library.Repository.ISenderRepository, Captain.Library.Repository"
              mapTo="Captain.Library.Repository.SenderRepository, Captain.Library.Repository">
    </register>
    <register type="Captain.Library.Workstation.ISenderWorkStation, Captain.Library.Workstation"
              mapTo="Captain.Library.Workstation.SenderWorkStation, Captain.Library.Workstation">
    </register>
  </container>
</unity>